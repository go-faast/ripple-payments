{"version":3,"file":"index.cjs.js","sources":["../src/types.ts","../src/constants.ts","../src/helpers.ts","../src/RipplePaymentsUtils.ts","../src/utils.ts","../src/BaseRipplePayments.ts","../src/bip44.ts","../src/HdRipplePayments.ts","../src/AccountRipplePayments.ts","../src/RippleBalanceMonitor.ts","../src/RipplePaymentsFactory.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { extendCodec, Logger, instanceofCodec, nullable, Numeric } from '@faast/ts-common'\nimport {\n  BaseTransactionInfo,\n  BaseUnsignedTransaction,\n  BaseSignedTransaction,\n  BaseBroadcastResult,\n  CreateTransactionOptions,\n  BaseConfig,\n  Payport,\n  FromTo,\n} from '@faast/payments-common'\nimport { FormattedTransactionType as RippleTransaction, RippleAPI } from 'ripple-lib'\nimport { KeyPair } from 'ripple-lib/dist/npm/transaction/types'\nimport { AccountRipplePayments } from './AccountRipplePayments'\n\ntype PromiseValue<T> = T extends Promise<infer X> ? X : never\ntype RippleLedger = PromiseValue<ReturnType<RippleAPI['getLedger']>>\n\nexport { RippleTransaction, RippleLedger, CreateTransactionOptions }\n\nexport type TransactionInfoRaw = RippleTransaction & {\n  currentLedger: RippleLedger\n}\n\nexport const BaseRippleConfig = extendCodec(\n  BaseConfig,\n  {},\n  {\n    server: t.union([t.string, instanceofCodec(RippleAPI), t.nullType]),\n  },\n  'BaseRippleConfig',\n)\nexport type BaseRippleConfig = t.TypeOf<typeof BaseRippleConfig>\n\nexport const RippleBalanceMonitorConfig = BaseRippleConfig\nexport type RippleBalanceMonitorConfig = t.TypeOf<typeof RippleBalanceMonitorConfig>\n\nexport const BaseRipplePaymentsConfig = extendCodec(\n  BaseRippleConfig,\n  {},\n  {\n    maxLedgerVersionOffset: t.number, // number of ledgers until a tx expires\n  },\n  'BaseRipplePaymentsConfig',\n)\nexport type BaseRipplePaymentsConfig = t.TypeOf<typeof BaseRipplePaymentsConfig>\n\nexport const HdRipplePaymentsConfig = extendCodec(\n  BaseRipplePaymentsConfig,\n  {\n    hdKey: t.string, // xprv or xpub\n  },\n  'HdRipplePaymentsConfig',\n)\nexport type HdRipplePaymentsConfig = t.TypeOf<typeof HdRipplePaymentsConfig>\n\nexport const RippleKeyPair = t.type(\n  {\n    publicKey: t.string,\n    privateKey: t.string,\n  },\n  'RippleKeyPair',\n)\nexport type RippleKeyPair = t.TypeOf<typeof RippleKeyPair>\n\nexport const RippleSecretPair = t.type(\n  {\n    address: t.string,\n    secret: t.string,\n  },\n  'RippleSecretPair',\n)\nexport type RippleSecretPair = t.TypeOf<typeof RippleSecretPair>\n\n/**\n * address, or secret+address, or public+private key\n */\nexport const RippleAccountConfig = t.union([t.string, RippleSecretPair, RippleKeyPair], 'RippleAccountConfig')\nexport type RippleAccountConfig = t.TypeOf<typeof RippleAccountConfig>\n\nexport const AccountRipplePaymentsConfig = extendCodec(\n  BaseRipplePaymentsConfig,\n  {\n    hotAccount: RippleAccountConfig,\n    depositAccount: RippleAccountConfig,\n  },\n  'AccountRipplePaymentsConfig',\n)\nexport type AccountRipplePaymentsConfig = t.TypeOf<typeof AccountRipplePaymentsConfig>\n\nexport const RipplePaymentsConfig = t.union(\n  [HdRipplePaymentsConfig, AccountRipplePaymentsConfig],\n  'RipplePaymentsConfig',\n)\nexport type RipplePaymentsConfig = t.TypeOf<typeof RipplePaymentsConfig>\n\nexport const RippleUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    amount: t.string,\n    fee: t.string,\n  },\n  'RippleUnsignedTransaction',\n)\nexport type RippleUnsignedTransaction = t.TypeOf<typeof RippleUnsignedTransaction>\n\nexport const RippleSignedTransaction = extendCodec(\n  BaseSignedTransaction,\n  {\n    id: t.string,\n  },\n  'RippleSignedTransaction',\n)\nexport type RippleSignedTransaction = t.TypeOf<typeof RippleSignedTransaction>\n\nexport const RippleTransactionInfo = extendCodec(\n  BaseTransactionInfo,\n  {\n    confirmationNumber: nullable(t.number),\n  },\n  {},\n  'RippleTransactionInfo',\n)\nexport type RippleTransactionInfo = t.TypeOf<typeof RippleTransactionInfo>\n\nexport const RippleBroadcastResult = extendCodec(\n  BaseBroadcastResult,\n  {\n    rebroadcast: t.boolean,\n    data: t.object,\n  },\n  'RippleBroadcastResult',\n)\nexport type RippleBroadcastResult = t.TypeOf<typeof RippleBroadcastResult>\n\nexport const RippleCreateTransactionOptions = extendCodec(\n  CreateTransactionOptions,\n  {},\n  {\n    maxLedgerVersionOffset: t.number,\n  },\n  'RippleCreateTransactionOptions',\n)\nexport type RippleCreateTransactionOptions = t.TypeOf<typeof RippleCreateTransactionOptions>\n\nexport type FromToWithPayport = FromTo & {\n  fromPayport: Payport\n  toPayport: Payport\n}\n\nexport type RippleSignatory = {\n  address: string\n  secret: string | KeyPair\n}\n","import { FeeLevel } from '@faast/payments-common'\nimport { RippleCreateTransactionOptions } from './types'\n\nexport const PACKAGE_NAME = 'ripple-payments'\n\nexport const DECIMAL_PLACES = 6\nexport const MIN_BALANCE = 20\nexport const DEFAULT_CREATE_TRANSACTION_OPTIONS: RippleCreateTransactionOptions = {}\nexport const DEFAULT_MAX_LEDGER_VERSION_OFFSET = 100 // ~6min\n\n/**\n * Source: https://github.com/ripple/ripple-lib/blob/develop/src/common/schemas/objects/address.json\n */\nexport const ADDRESS_REGEX = /^r[1-9A-HJ-NP-Za-km-z]{25,34}$/\n\nexport const EXTRA_ID_REGEX = /^[0-9]+$/\n\n/**\n * Source: crypto-regex\n */\nexport const XPUB_REGEX = /^xpub[a-km-zA-HJ-NP-Z1-9]{100,108}$/\nexport const XPRV_REGEX = /^xprv[a-km-zA-HJ-NP-Z1-9]{100,108}$/\n\nexport const NOT_FOUND_ERRORS = ['MissingLedgerHistoryError', 'NotFoundError']\n\nexport const DEFAULT_MAINNET_SERVER = 'wss://s1.ripple.com'\nexport const DEFAULT_TESTNET_SERVER = 'wss://s.altnet.rippletest.net:51233'\n","import { createUnitConverters } from '@faast/payments-common'\nimport { DECIMAL_PLACES, XPRV_REGEX, XPUB_REGEX, ADDRESS_REGEX, EXTRA_ID_REGEX } from './constants'\nimport { isNil } from '@faast/ts-common'\n\nconst {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n} = createUnitConverters(DECIMAL_PLACES)\n\nexport {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n}\n\nexport function isValidXprv(xprv: unknown): boolean {\n  return typeof xprv === 'string' && XPRV_REGEX.test(xprv)\n}\n\nexport function isValidXpub(xpub: unknown): boolean {\n  return typeof xpub === 'string' && XPUB_REGEX.test(xpub)\n}\n\nexport function isValidAddress(address: unknown): boolean {\n  return typeof address === 'string' && ADDRESS_REGEX.test(address)\n}\n\nexport function isValidExtraId(extraId: unknown): boolean {\n  return typeof extraId === 'string' && EXTRA_ID_REGEX.test(extraId)\n}\n\nexport function assertValidAddress(address: string): void {\n  if (!isValidAddress(address)) {\n    throw new Error(`Invalid ripple address: ${address}`)\n  }\n}\n\nexport function assertValidExtraId(extraId: string): void {\n  if (!isValidExtraId(extraId)) {\n    throw new Error(`Invalid ripple extraId: ${extraId}`)\n  }\n}\n\nexport function assertValidExtraIdOrNil(extraId?: string | undefined | null): void {\n  if (!isNil(extraId) && !isValidExtraId(extraId)) {\n    throw new Error(`Invalid ripple extraId: ${extraId}`)\n  }\n}\n","import { PaymentsUtils, BaseConfig, NetworkType, Payport } from '@faast/payments-common'\nimport {\n  toMainDenominationString,\n  toBaseDenominationString,\n  isValidXprv,\n  isValidXpub,\n  isValidAddress,\n  isValidExtraId,\n} from './helpers'\nimport { Logger, DelegateLogger, isNil, assertType } from '@faast/ts-common'\nimport { PACKAGE_NAME } from './constants'\n\nexport class RipplePaymentsUtils implements PaymentsUtils {\n  networkType: NetworkType\n  logger: Logger\n\n  constructor(config: BaseConfig = {}) {\n    assertType(BaseConfig, config)\n    this.networkType = config.network || NetworkType.Mainnet\n    this.logger = new DelegateLogger(config.logger, PACKAGE_NAME)\n  }\n\n  async isValidExtraId(extraId: string): Promise<boolean> {\n    return isValidExtraId(extraId)\n  }\n\n  async isValidAddress(address: string): Promise<boolean> {\n    return isValidAddress(address)\n  }\n\n  async isValidPayport(payport: Payport): Promise<boolean> {\n    if (!Payport.is(payport)) {\n      return false\n    }\n    const { address, extraId } = payport\n    return (await this.isValidAddress(address)) && (isNil(extraId) ? true : this.isValidExtraId(extraId))\n  }\n\n  toMainDenomination(amount: string | number): string {\n    return toMainDenominationString(amount)\n  }\n\n  toBaseDenomination(amount: string | number): string {\n    return toBaseDenominationString(amount)\n  }\n\n  isValidXprv = isValidXprv\n  isValidXpub = isValidXpub\n}\n","import { BaseRippleConfig } from './types'\nimport { RippleAPI } from 'ripple-lib'\nimport { isString } from 'util'\nimport { NetworkType } from '@faast/payments-common'\nimport promiseRetry from 'promise-retry'\nimport { DEFAULT_TESTNET_SERVER, DEFAULT_MAINNET_SERVER } from './constants'\nimport { Logger } from '@faast/ts-common'\n\nexport function padLeft(x: string, n: number, v: string): string {\n  while (x.length < n) {\n    x = `${v}${x}`\n  }\n  return x\n}\n\nexport type ResolvedServer = {\n  api: RippleAPI\n  server: string | null\n}\n\nexport function resolveRippleServer(server: BaseRippleConfig['server'], network: NetworkType): ResolvedServer {\n  if (typeof server === 'undefined') {\n    server = network === NetworkType.Testnet ? DEFAULT_TESTNET_SERVER : DEFAULT_MAINNET_SERVER\n  }\n  if (isString(server)) {\n    return {\n      api: new RippleAPI({\n        server,\n      }),\n      server,\n    }\n  } else if (server instanceof RippleAPI) {\n    return {\n      api: server,\n      server: (server.connection as any)._url || '',\n    }\n  } else {\n    // null server arg -> offline mode\n    return {\n      api: new RippleAPI(),\n      server: null,\n    }\n  }\n}\n\nconst CONNECTION_ERRORS = ['ConnectionError', 'NotConnectedError', 'DisconnectedError']\nconst RETRYABLE_ERRORS = [...CONNECTION_ERRORS, 'TimeoutError']\nconst MAX_RETRIES = 3\n\nexport function retryIfDisconnected<T>(fn: () => Promise<T>, rippleApi: RippleAPI, logger: Logger): Promise<T> {\n  return promiseRetry(\n    (retry, attempt) => {\n      return fn().catch(async e => {\n        const eName = e ? e.constructor.name : ''\n        if (RETRYABLE_ERRORS.includes(eName)) {\n          if (CONNECTION_ERRORS.includes(eName)) {\n            logger.log(\n              'Connection error during rippleApi call, attempting to reconnect then ' +\n                `retrying ${MAX_RETRIES - attempt} more times`,\n              e.toString(),\n            )\n            if (rippleApi.isConnected()) {\n              await rippleApi.disconnect()\n            }\n            await rippleApi.connect()\n          } else {\n            logger.log(\n              `Retryable error during rippleApi call, retrying ${MAX_RETRIES - attempt} more times`,\n              e.toString(),\n            )\n          }\n          retry(e)\n        }\n        throw e\n      })\n    },\n    {\n      retries: MAX_RETRIES,\n    },\n  )\n}\n","import {\n  BasePayments,\n  BalanceResult,\n  CreateTransactionOptions,\n  FeeOption,\n  ResolvedFeeOption,\n  FromTo,\n  Payport,\n  FeeLevel,\n  FeeRateType,\n  TransactionStatus,\n  ResolveablePayport,\n} from '@faast/payments-common'\nimport { Logger, assertType, isNil, Numeric } from '@faast/ts-common'\nimport BigNumber from 'bignumber.js'\nimport { RippleAPI } from 'ripple-lib'\nimport { FormattedPaymentTransaction, FormattedPayment, Prepare } from 'ripple-lib/dist/npm/transaction/types'\nimport { Adjustment, Amount } from 'ripple-lib/dist/npm/common/types/objects'\nimport { omit } from 'lodash'\n\nimport {\n  BaseRipplePaymentsConfig,\n  RippleUnsignedTransaction,\n  RippleSignedTransaction,\n  RippleBroadcastResult,\n  RippleTransactionInfo,\n  RippleCreateTransactionOptions,\n  FromToWithPayport,\n  RippleSignatory,\n} from './types'\nimport { RipplePaymentsUtils } from './RipplePaymentsUtils'\nimport {\n  DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  MIN_BALANCE,\n  DEFAULT_MAX_LEDGER_VERSION_OFFSET,\n  NOT_FOUND_ERRORS,\n} from './constants'\nimport { assertValidAddress, assertValidExtraIdOrNil, toBaseDenominationBigNumber } from './helpers'\nimport { resolveRippleServer, retryIfDisconnected } from './utils'\n\nfunction extraIdToTag(extraId: string | null | undefined): number | undefined {\n  return isNil(extraId) ? undefined : Number.parseInt(extraId)\n}\nfunction serializePayport(payport: Payport): string {\n  return isNil(payport.extraId) ? payport.address : `${payport.address}:${payport.extraId}`\n}\n\nexport abstract class BaseRipplePayments<Config extends BaseRipplePaymentsConfig> extends RipplePaymentsUtils\n  implements\n    BasePayments<\n      Config,\n      RippleUnsignedTransaction,\n      RippleSignedTransaction,\n      RippleBroadcastResult,\n      RippleTransactionInfo\n    > {\n  rippleApi: RippleAPI\n  server: string | null\n  logger: Logger\n\n  constructor(public config: Config) {\n    super(config)\n    assertType(BaseRipplePaymentsConfig, config)\n    const { api, server } = resolveRippleServer(config.server, this.networkType)\n    this.rippleApi = api\n    this.server = server\n  }\n\n  async init(): Promise<void> {\n    if (!this.rippleApi.isConnected()) {\n      await this.rippleApi.connect()\n    }\n    await this.initAccounts()\n  }\n\n  async destroy(): Promise<void> {\n    if (this.rippleApi.isConnected()) {\n      await this.rippleApi.disconnect()\n    }\n  }\n\n  private async retryDced<T>(fn: () => Promise<T>): Promise<T> {\n    return retryIfDisconnected(fn, this.rippleApi, this.logger)\n  }\n\n  getFullConfig() {\n    return this.config\n  }\n\n  getPublicConfig() {\n    return {\n      ...omit(this.config, ['logger', 'server']),\n      ...this.getPublicAccountConfig(),\n    }\n  }\n\n  abstract getPublicAccountConfig(): Config\n\n  abstract getAccountIds(): string[]\n\n  abstract getAccountId(index: number): string\n\n  abstract getHotSignatory(): RippleSignatory\n\n  abstract getDepositSignatory(): RippleSignatory\n\n  abstract isReadOnly(): boolean\n\n  private doGetPayport(index: number): Payport {\n    if (index === 0) {\n      return { address: this.getHotSignatory().address }\n    }\n    if (index === 1) {\n      return { address: this.getDepositSignatory().address }\n    }\n    return { address: this.getDepositSignatory().address, extraId: String(index) }\n  }\n\n  private doResolvePayport(payport: ResolveablePayport): Payport {\n    if (typeof payport === 'number') {\n      return this.doGetPayport(payport)\n    } else if (typeof payport === 'string') {\n      assertValidAddress(payport)\n      return { address: payport }\n    }\n    assertValidAddress(payport.address)\n    assertValidExtraIdOrNil(payport.extraId)\n    return payport\n  }\n\n  async resolvePayport(payport: ResolveablePayport): Promise<Payport> {\n    return this.doResolvePayport(payport)\n  }\n\n  async resolveFromTo(from: number, to: ResolveablePayport): Promise<FromToWithPayport> {\n    const fromPayport = await this.getPayport(from)\n    const toPayport = await this.resolvePayport(to)\n    return {\n      fromAddress: fromPayport.address,\n      fromIndex: from,\n      fromExtraId: fromPayport.extraId,\n      fromPayport,\n      toAddress: toPayport.address,\n      toIndex: typeof to === 'number' ? to : null,\n      toExtraId: toPayport.extraId,\n      toPayport,\n    }\n  }\n\n  async getPayport(index: number): Promise<Payport> {\n    return this.doGetPayport(index)\n  }\n\n  requiresBalanceMonitor() {\n    return true\n  }\n\n  getAddressesToMonitor(): string[] {\n    return [this.getHotSignatory().address, this.getDepositSignatory().address]\n  }\n\n  isSweepableAddressBalance(balance: Numeric): boolean {\n    return new BigNumber(balance).gt(0)\n  }\n\n  isSweepableBalance(balance: string, payport?: ResolveablePayport): boolean {\n    const balanceBase = toBaseDenominationBigNumber(balance)\n    if (payport) {\n      payport = this.doResolvePayport(payport)\n      if (isNil(payport.extraId)) {\n        return this.isSweepableAddressBalance(balanceBase)\n      }\n    }\n    return balanceBase.gt(0)\n  }\n\n  /**\n   * A special method that broadcasts a transaction that enables the `requireDestinationTag` setting\n   * on the deposit signatory.\n   */\n  async initAccounts() {\n    const { address, secret } = this.getDepositSignatory()\n    const settings = await this.rippleApi.getSettings(address)\n    if (settings.requireDestinationTag) {\n      return\n    }\n    if (this.isReadOnly()) {\n      this.logger.warn(`Deposit account (${address}) doesn't have requireDestinationTag property set`)\n      return\n    }\n    const { confirmedBalance } = await this.getBalance(address)\n    const { feeMain } = await this.resolveFeeOption({ feeLevel: FeeLevel.Medium })\n    if (new BigNumber(confirmedBalance).lt(feeMain)) {\n      this.logger.warn(\n        `Insufficient balance in deposit account (${address}) to pay fee of ${feeMain} XRP ` +\n          'to send a transaction that sets requireDestinationTag property to true',\n      )\n    }\n    const unsignedTx = await this.retryDced(() =>\n      this.rippleApi.prepareSettings(address, {\n        requireDestinationTag: true,\n      }),\n    )\n    const signedTx = this.rippleApi.sign(unsignedTx.txJSON, secret)\n    const broadcast = await this.retryDced(() => this.rippleApi.submit(signedTx.signedTransaction))\n    return {\n      txId: signedTx.id,\n      unsignedTx,\n      signedTx,\n      broadcast,\n    }\n  }\n\n  async getBalance(payportOrIndex: ResolveablePayport): Promise<BalanceResult> {\n    const payport = await this.resolvePayport(payportOrIndex)\n    const { address, extraId } = payport\n    if (!isNil(extraId)) {\n      throw new Error(`Cannot getBalance of ripple payport with extraId ${extraId}, use BalanceMonitor instead`)\n    }\n    const balances = await this.retryDced(() => this.rippleApi.getBalances(address))\n    this.logger.debug(`rippleApi.getBalance ${address}`, balances)\n    const xrpBalance = balances.find(({ currency }) => currency === 'XRP')\n    const xrpAmount = xrpBalance && xrpBalance.value ? xrpBalance.value : '0'\n    // Subtract locked up min balance from result to avoid confusion about what is actually spendable\n    const confirmedBalance = new BigNumber(xrpAmount).minus(MIN_BALANCE)\n    return {\n      confirmedBalance: confirmedBalance.toString(),\n      unconfirmedBalance: '0',\n      sweepable: this.isSweepableAddressBalance(xrpAmount),\n    }\n  }\n\n  async getNextSequenceNumber(payportOrIndex: ResolveablePayport): Promise<number> {\n    const payport = await this.resolvePayport(payportOrIndex)\n    const { address } = payport\n    const accountInfo = await this.retryDced(() => this.rippleApi.getAccountInfo(address))\n    return accountInfo.sequence\n  }\n\n  resolveIndexFromAdjustment(adjustment: Adjustment): number | null {\n    const { address, tag } = adjustment\n    if (address === this.getHotSignatory().address) {\n      return 0\n    } else if (address === this.getDepositSignatory().address) {\n      return tag || 1\n    }\n    return null\n  }\n\n  async getTransactionInfo(txId: string): Promise<RippleTransactionInfo> {\n    let tx\n    try {\n      tx = await this.retryDced(() => this.rippleApi.getTransaction(txId))\n    } catch (e) {\n      const eString = e.toString()\n      if (NOT_FOUND_ERRORS.some(type => eString.includes(type))) {\n        throw new Error(`Transaction not found: ${eString}`)\n      }\n      throw e\n    }\n    this.logger.debug('getTransaction', txId, tx)\n    if (tx.type !== 'payment') {\n      throw new Error(`Unsupported ripple tx type ${tx.type}`)\n    }\n    const { specification, outcome } = tx as FormattedPaymentTransaction\n    const { source, destination } = specification\n    const amountObject = ((source as any).maxAmount || source.amount) as Amount\n    if (amountObject.currency !== 'XRP') {\n      throw new Error(`Unsupported ripple tx currency ${amountObject.currency}`)\n    }\n    const fromIndex = this.resolveIndexFromAdjustment(source)\n    const toIndex = this.resolveIndexFromAdjustment(destination)\n    const amount = amountObject.value\n    const isSuccessful = outcome.result.startsWith('tes')\n    const isCostDestroyed = outcome.result.startsWith('tec')\n    const status = isSuccessful || isCostDestroyed ? TransactionStatus.Confirmed : TransactionStatus.Failed\n    const isExecuted = isSuccessful\n    const confirmationNumber = outcome.ledgerVersion\n    const ledger = await this.retryDced(() => this.rippleApi.getLedger({ ledgerVersion: confirmationNumber }))\n    const currentLedgerVersion = await this.retryDced(() => this.rippleApi.getLedgerVersion())\n    const confirmationId = ledger.ledgerHash\n    const confirmationTimestamp = outcome.timestamp ? new Date(outcome.timestamp) : null\n    return {\n      status,\n      id: tx.id,\n      fromIndex,\n      fromAddress: source.address,\n      fromExtraId: typeof source.tag !== 'undefined' ? String(source.tag) : null,\n      toIndex,\n      toAddress: destination.address,\n      toExtraId: typeof destination.tag !== 'undefined' ? String(destination.tag) : null,\n      amount: amount,\n      fee: outcome.fee,\n      sequenceNumber: tx.sequence,\n      confirmationId,\n      confirmationNumber,\n      confirmationTimestamp,\n      isExecuted,\n      isConfirmed: Boolean(confirmationNumber),\n      confirmations: currentLedgerVersion - confirmationNumber,\n      data: tx,\n    }\n  }\n\n  async resolveFeeOption(feeOption: FeeOption): Promise<ResolvedFeeOption> {\n    let targetFeeLevel\n    let targetFeeRate\n    let targetFeeRateType\n    let feeMain: string\n    let feeBase: string\n    if (feeOption.feeLevel === FeeLevel.Custom) {\n      targetFeeLevel = feeOption.feeLevel\n      targetFeeRate = feeOption.feeRate\n      targetFeeRateType = feeOption.feeRateType\n      if (targetFeeRateType === FeeRateType.Base) {\n        feeBase = targetFeeRate\n        feeMain = this.toMainDenomination(feeBase)\n      } else if (targetFeeRateType === FeeRateType.Main) {\n        feeMain = targetFeeRate\n        feeBase = this.toBaseDenomination(feeMain)\n      } else {\n        throw new Error(`Unsupport ripple feeRateType ${feeOption.feeRateType}`)\n      }\n    } else {\n      targetFeeLevel = feeOption.feeLevel || FeeLevel.Medium\n      let cushion: number | undefined\n      if (targetFeeLevel === FeeLevel.Low) {\n        cushion = 1\n      } else if (targetFeeLevel === FeeLevel.Medium) {\n        cushion = 1.2\n      } else if (targetFeeLevel === FeeLevel.High) {\n        cushion = 1.5\n      }\n      feeMain = await this.retryDced(() => this.rippleApi.getFee(cushion))\n      feeBase = this.toBaseDenomination(feeMain)\n      targetFeeRate = feeMain\n      targetFeeRateType = FeeRateType.Main\n    }\n    return {\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      feeMain,\n      feeBase,\n    }\n  }\n\n  private async resolvePayportBalance(\n    fromPayport: Payport,\n    options: RippleCreateTransactionOptions,\n  ): Promise<BigNumber> {\n    if (isNil(fromPayport.extraId)) {\n      const balances = await this.getBalance(fromPayport)\n      return new BigNumber(balances.confirmedBalance)\n    }\n    if (typeof options.payportBalance !== 'string') {\n      throw new Error('ripple-payments createSweepTransaction missing required payportBalance option')\n    }\n    const payportBalance = new BigNumber(options.payportBalance)\n    if (payportBalance.isNaN()) {\n      throw new Error(`Invalid NaN payportBalance option provided: ${options.payportBalance}`)\n    }\n    return payportBalance\n  }\n\n  private async doCreateTransaction(\n    fromTo: FromTo,\n    feeOption: ResolvedFeeOption,\n    amount: BigNumber,\n    payportBalance: BigNumber,\n    options: RippleCreateTransactionOptions,\n  ): Promise<RippleUnsignedTransaction> {\n    if (amount.isNaN() || amount.lte(0)) {\n      throw new Error(`Invalid amount provided to ripple-payments createTransaction: ${amount}`)\n    }\n    const { fromIndex, fromAddress, fromExtraId, fromPayport, toIndex, toAddress, toExtraId } = fromTo\n    if (fromAddress === toAddress) {\n      throw new Error('Cannot create XRP payment transaction sending XRP to self')\n    }\n    const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeMain } = feeOption\n    const { sequenceNumber } = options\n    const maxLedgerVersionOffset =\n      options.maxLedgerVersionOffset || this.config.maxLedgerVersionOffset || DEFAULT_MAX_LEDGER_VERSION_OFFSET\n    const amountString = amount.toString()\n    const addressBalances = await this.getBalance({ address: fromAddress })\n    const addressBalance = new BigNumber(addressBalances.confirmedBalance)\n    const actualBalance = addressBalance.plus(MIN_BALANCE)\n    if (addressBalance.lt(0)) {\n      throw new Error(\n        `Cannot send from ripple address that has less than ${MIN_BALANCE} XRP: ${fromAddress} (${actualBalance} XRP)`,\n      )\n    }\n    const totalValue = amount.plus(feeMain)\n    if (addressBalance.minus(totalValue).lt(0)) {\n      throw new Error(\n        `Cannot send ${amountString} XRP with fee of ${feeMain} XRP because it would reduce the balance below ` +\n          `the minimum required balance of ${MIN_BALANCE} XRP: ${fromAddress} (${actualBalance} XRP)`,\n      )\n    }\n    if (typeof fromExtraId === 'string' && totalValue.gt(payportBalance)) {\n      throw new Error(\n        `Insufficient payport balance of ${payportBalance} XRP to send ${amountString} XRP ` +\n          `with fee of ${feeMain} XRP: ${serializePayport(fromPayport)}`,\n      )\n    }\n    const preparedTx = await this.retryDced(() =>\n      this.rippleApi.preparePayment(\n        fromAddress,\n        {\n          source: {\n            address: fromAddress,\n            tag: extraIdToTag(fromExtraId),\n            maxAmount: {\n              currency: 'XRP',\n              value: amountString,\n            },\n          },\n          destination: {\n            address: toAddress,\n            tag: extraIdToTag(toExtraId),\n            amount: {\n              currency: 'XRP',\n              value: amountString,\n            },\n          },\n        },\n        {\n          maxLedgerVersionOffset,\n          sequence: sequenceNumber,\n        },\n      ),\n    )\n    return {\n      status: TransactionStatus.Unsigned,\n      id: null,\n      fromIndex,\n      fromAddress,\n      fromExtraId,\n      toIndex,\n      toAddress,\n      toExtraId,\n      amount: amountString,\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      fee: feeMain,\n      sequenceNumber: preparedTx.instructions.sequence,\n      data: preparedTx,\n    }\n  }\n\n  async createTransaction(\n    from: number,\n    to: ResolveablePayport,\n    amount: string,\n    options: RippleCreateTransactionOptions = DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  ): Promise<RippleUnsignedTransaction> {\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options)\n    const payportBalance = await this.resolvePayportBalance(fromTo.fromPayport, options)\n    const amountBn = new BigNumber(amount)\n    return this.doCreateTransaction(fromTo, feeOption, amountBn, payportBalance, options)\n  }\n\n  async createSweepTransaction(\n    from: number,\n    to: ResolveablePayport,\n    options: RippleCreateTransactionOptions = DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  ): Promise<RippleUnsignedTransaction> {\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options)\n    const payportBalance = await this.resolvePayportBalance(fromTo.fromPayport, options)\n    let amountBn = payportBalance.minus(feeOption.feeMain)\n    if (amountBn.lt(0)) {\n      const fromPayport = { address: fromTo.fromAddress, extraId: fromTo.fromExtraId }\n      throw new Error(\n        `Insufficient balance to sweep from ripple payport with fee of ${feeOption.feeMain} XRP: ` +\n          `${serializePayport(fromPayport)} (${payportBalance} XRP)`,\n      )\n    }\n    return this.doCreateTransaction(fromTo, feeOption, amountBn, payportBalance, options)\n  }\n\n  async signTransaction(unsignedTx: RippleUnsignedTransaction): Promise<RippleSignedTransaction> {\n    assertType(RippleUnsignedTransaction, unsignedTx)\n    if (this.isReadOnly()) {\n      throw new Error('Cannot sign transaction with read only ripple payments (no xprv or secrets provided)')\n    }\n    this.logger.debug('signTransaction', unsignedTx.data)\n    const { txJSON } = unsignedTx.data as Prepare\n    let secret\n    const hotSignatory = this.getHotSignatory()\n    const depositSignatory = this.getDepositSignatory()\n    if (unsignedTx.fromAddress === hotSignatory.address) {\n      secret = hotSignatory.secret\n    } else if (unsignedTx.fromAddress === depositSignatory.address) {\n      secret = depositSignatory.secret\n    } else {\n      throw new Error(`Cannot sign ripple transaction from address ${unsignedTx.fromAddress}`)\n    }\n    const signResult = this.rippleApi.sign(txJSON, secret)\n    return {\n      ...unsignedTx,\n      id: signResult.id,\n      data: signResult,\n      status: TransactionStatus.Signed,\n    }\n  }\n\n  async broadcastTransaction(signedTx: RippleSignedTransaction): Promise<RippleBroadcastResult> {\n    assertType(RippleSignedTransaction, signedTx)\n    const signedTxString = (signedTx.data as any).signedTransaction as string\n    let rebroadcast: boolean = false\n    try {\n      const existing = await this.getTransactionInfo(signedTx.id)\n      rebroadcast = existing.id === signedTx.id\n    } catch (e) {}\n    const result = (await this.retryDced(() => this.rippleApi.submit(signedTxString))) as any\n    this.logger.debug('broadcasted', result)\n    const resultCode = result.engine_result || result.resultCode || ''\n    const okay =\n      resultCode.startsWith('tes') || // successful\n      resultCode.startsWith('ter') || // retryable\n      resultCode.startsWith('tec') || // not executed, but fee lost\n      resultCode === 'tefPAST_SEQ' // sequence number too high\n    if (!okay) {\n      throw new Error(`Failed to broadcast ripple tx ${signedTx.id} with result code ${resultCode}`)\n    }\n    return {\n      id: signedTx.id,\n      rebroadcast,\n      data: result,\n    }\n  }\n}\n","// Many parts of this code are snippets from tronWeb:\n// https://github.com/tronprotocol/tron-web/blob/master/src/index.js\n\nimport { BIP32Interface as HDNode, fromBase58, fromSeed } from 'bip32'\nimport baseX from 'base-x'\nimport { padLeft } from './utils'\nimport crypto from 'crypto'\nimport { RippleSignatory } from './types'\n\nexport const RIPPLE_B58_DICT = 'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\nexport const base58 = baseX(RIPPLE_B58_DICT)\n\nexport const derivationPath = \"m/44'/144'/0'\"\nconst derivationPathParts = derivationPath.split('/').slice(1)\n\nexport function deriveSignatory(hdKey: string, index: number): RippleSignatory {\n  const key = fromBase58(hdKey)\n  const derived = deriveBasePath(key)\n    .derive(0)\n    .derive(index)\n  const privateKey = derived.isNeutered() ? '' : hdNodeToPrivateKey(derived)\n  const publicKey = hdNodeToPublicKey(derived)\n  const address = publicKeyToAddress(publicKey)\n  return {\n    address,\n    secret: {\n      privateKey,\n      publicKey,\n    },\n  }\n}\n\nexport function xprvToXpub(xprv: string | HDNode): string {\n  const key = typeof xprv === 'string' ? fromBase58(xprv) : xprv\n  const derivedPubKey = deriveBasePath(key)\n  return derivedPubKey.neutered().toBase58()\n}\n\nexport function generateNewKeys(): { xpub: string; xprv: string } {\n  const key = fromSeed(crypto.randomBytes(32))\n  const xprv = key.toBase58()\n  const xpub = xprvToXpub(xprv)\n  return {\n    xprv,\n    xpub,\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction deriveBasePath(key: HDNode): HDNode {\n  const parts = derivationPathParts.slice(key.depth)\n  if (parts.length > 0) {\n    return key.derivePath(`m/${parts.join('/')}`)\n  }\n  return key\n}\n\nexport function hdNodeToPublicKey(key: HDNode): string {\n  const hexKey = padLeft(key.publicKey.toString('hex'), 66, '0')\n  return hexKey.toUpperCase()\n}\n\nexport function hdNodeToPrivateKey(key: HDNode): string {\n  if (key.isNeutered() || typeof key.privateKey === 'undefined') {\n    throw new Error('Cannot derive private key from neutered bip32 node')\n  }\n  const hexKey = padLeft(key.privateKey.toString('hex'), 64, '0')\n  return hexKey.toUpperCase()\n}\n\n/**\n * Source: https://xrpl.org/accounts.html#address-encoding\n */\nexport function publicKeyToAddress(pubkeyHex: string): string {\n  const pubkeyBuffer = Buffer.from(pubkeyHex, 'hex')\n  const pubkeyInnerHash = crypto.createHash('sha256').update(pubkeyBuffer)\n  const pubkeyOuterHash = crypto.createHash('ripemd160')\n  pubkeyOuterHash.update(pubkeyInnerHash.digest())\n  const accountId = pubkeyOuterHash.digest()\n  const addressTypePrefix = Buffer.from([0x00])\n  const payload = Buffer.concat([addressTypePrefix, accountId])\n  const chksumHash1 = crypto\n    .createHash('sha256')\n    .update(payload)\n    .digest()\n  const chksumHash2 = crypto\n    .createHash('sha256')\n    .update(chksumHash1)\n    .digest()\n  const checksum = chksumHash2.slice(0, 4)\n  const dataToEncode = Buffer.concat([payload, checksum])\n  const address = base58.encode(dataToEncode)\n  return address\n}\n","import { HdRipplePaymentsConfig, RippleSignatory } from './types'\nimport { BaseRipplePayments } from './BaseRipplePayments'\nimport { xprvToXpub, generateNewKeys, deriveSignatory } from './bip44'\nimport { isValidXprv, isValidXpub } from './helpers'\n\nexport class HdRipplePayments extends BaseRipplePayments<HdRipplePaymentsConfig> {\n  readonly xprv: string | null\n  readonly xpub: string\n  readonly hotSignatory: RippleSignatory\n  readonly depositSignatory: RippleSignatory\n\n  constructor(config: HdRipplePaymentsConfig) {\n    super(config)\n    if (isValidXprv(config.hdKey)) {\n      this.xprv = config.hdKey\n      this.xpub = xprvToXpub(this.xprv)\n    } else if (isValidXpub(config.hdKey)) {\n      this.xprv = null\n      this.xpub = config.hdKey\n    } else {\n      throw new Error('Account must be a valid xprv or xpub')\n    }\n    this.hotSignatory = deriveSignatory(config.hdKey, 0)\n    this.depositSignatory = deriveSignatory(config.hdKey, 1)\n  }\n\n  static generateNewKeys = generateNewKeys\n\n  isReadOnly() {\n    return this.xprv === null\n  }\n\n  getPublicAccountConfig() {\n    return {\n      hdKey: xprvToXpub(this.config.hdKey),\n    }\n  }\n\n  getAccountIds(): string[] {\n    return [this.xpub]\n  }\n\n  getAccountId(index: number): string {\n    return this.xpub\n  }\n\n  getHotSignatory() {\n    return this.hotSignatory\n  }\n\n  getDepositSignatory() {\n    return this.depositSignatory\n  }\n}\n","import {\n  AccountRipplePaymentsConfig,\n  RippleSignatory,\n  RippleAccountConfig,\n  RippleKeyPair,\n  RippleSecretPair,\n} from './types'\nimport { BaseRipplePayments } from './BaseRipplePayments'\nimport { assertType } from '@faast/ts-common'\nimport { isValidAddress } from './helpers'\n\nexport class AccountRipplePayments extends BaseRipplePayments<AccountRipplePaymentsConfig> {\n  readOnly: boolean = false\n  readonly hotSignatory: RippleSignatory\n  readonly depositSignatory: RippleSignatory\n\n  constructor(config: AccountRipplePaymentsConfig) {\n    super(config)\n    assertType(AccountRipplePaymentsConfig, config)\n    this.hotSignatory = this.accountConfigToSignatory(config.hotAccount)\n    this.depositSignatory = this.accountConfigToSignatory(config.depositAccount)\n  }\n\n  accountConfigToSignatory(accountConfig: RippleAccountConfig): RippleSignatory {\n    if (RippleKeyPair.is(accountConfig)) {\n      if (!accountConfig.privateKey) {\n        this.readOnly = true\n      }\n      const address = this.rippleApi.deriveAddress(accountConfig.publicKey)\n      return {\n        address,\n        secret: accountConfig,\n      }\n    } else if (RippleSecretPair.is(accountConfig)) {\n      if (!accountConfig.secret) {\n        this.readOnly = true\n      }\n      return accountConfig\n    } else if (isValidAddress(accountConfig)) {\n      this.readOnly = true\n      return {\n        address: accountConfig,\n        secret: '',\n      }\n    }\n    throw new Error('Invalid ripple account config provided to ripple payments')\n  }\n\n  isReadOnly() {\n    return this.readOnly\n  }\n\n  getPublicAccountConfig(): AccountRipplePaymentsConfig {\n    return {\n      hotAccount: this.hotSignatory.address,\n      depositAccount: this.depositSignatory.address,\n    }\n  }\n\n  getAccountIds(): string[] {\n    return [this.hotSignatory.address, this.depositSignatory.address]\n  }\n\n  getAccountId(index: number): string {\n    if (index < 0) {\n      throw new Error(`Invalid ripple payments accountId index ${index}`)\n    }\n    if (index === 0) {\n      return this.hotSignatory.address\n    }\n    return this.depositSignatory.address\n  }\n\n  getHotSignatory() {\n    return this.hotSignatory\n  }\n\n  getDepositSignatory() {\n    return this.depositSignatory\n  }\n}\n","import {\n  BalanceActivityCallback,\n  GetBalanceActivityOptions,\n  BalanceActivity,\n  BalanceActivityType,\n  BalanceMonitor,\n  RetrieveBalanceActivitiesResult,\n} from '@faast/payments-common'\nimport { RippleAPI } from 'ripple-lib'\nimport { FormattedPaymentTransaction, FormattedTransactionType } from 'ripple-lib/dist/npm/transaction/types'\nimport { TransactionsOptions } from 'ripple-lib/dist/npm/ledger/transactions'\n\nimport { padLeft, resolveRippleServer, retryIfDisconnected } from './utils'\nimport { RippleBalanceMonitorConfig } from './types'\nimport { assertValidAddress } from './helpers'\nimport { isUndefined, isNumber, isString, isNull } from 'util'\nimport { assertType } from '@faast/ts-common'\n\nexport class RippleBalanceMonitor extends BalanceMonitor {\n  rippleApi: RippleAPI\n  server: string | null\n\n  constructor(public config: RippleBalanceMonitorConfig) {\n    super(config)\n    assertType(RippleBalanceMonitorConfig, config)\n    const { api, server } = resolveRippleServer(config.server, this.networkType)\n    this.rippleApi = api\n    this.server = server\n  }\n\n  async init(): Promise<void> {\n    if (!this.rippleApi.isConnected()) {\n      await this.rippleApi.connect()\n    }\n  }\n\n  async destroy(): Promise<void> {\n    if (this.rippleApi.isConnected()) {\n      await this.rippleApi.disconnect()\n    }\n  }\n\n  private async retryDced<T>(fn: () => Promise<T>): Promise<T> {\n    return retryIfDisconnected(fn, this.rippleApi, this.logger)\n  }\n\n  async subscribeAddresses(addresses: string[]) {\n    for (let address of addresses) {\n      assertValidAddress(address)\n    }\n    try {\n      const res = await this.retryDced(() => this.rippleApi.request('subscribe', { accounts: addresses }))\n      if (res.status === 'success') {\n        this.logger.log('Ripple successfully subscribed', res)\n      } else {\n        this.logger.warn('Ripple subscribe unsuccessful', res)\n      }\n    } catch (e) {\n      this.logger.error('Failed to subscribe to ripple addresses', e.toString())\n      throw e\n    }\n  }\n\n  onBalanceActivity(callbackFn: BalanceActivityCallback) {\n    this.rippleApi.connection.on('transaction', async (tx: FormattedTransactionType) => {\n      const activity = await this.txToBalanceActivity(tx.address, tx)\n      if (activity) {\n        callbackFn(activity)\n      }\n    })\n  }\n\n  async resolveFromToLedgers(options: GetBalanceActivityOptions): Promise<RetrieveBalanceActivitiesResult> {\n    const serverInfo = await this.retryDced(() => this.rippleApi.getServerInfo())\n    const completeLedgers = serverInfo.completeLedgers.split('-')\n    let fromLedgerVersion = Number.parseInt(completeLedgers[0])\n    let toLedgerVersion = Number.parseInt(completeLedgers[1])\n    const { from, to } = options\n    const requestedFrom = isUndefined(from) ? undefined : isNumber(from) ? from : from.confirmationNumber\n    const requestedTo = isUndefined(to) ? undefined : isNumber(to) ? to : to.confirmationNumber\n    if (isNumber(requestedFrom)) {\n      if (requestedFrom < fromLedgerVersion) {\n        this.logger.warn(\n          `Server balance activity doesn't go back to ledger ${requestedFrom}, using ${fromLedgerVersion} instead`,\n        )\n      } else {\n        fromLedgerVersion = requestedFrom\n      }\n    }\n    if (isNumber(requestedTo)) {\n      if (requestedTo > toLedgerVersion) {\n        this.logger.warn(\n          `Server balance activity doesn't go up to ledger ${requestedTo}, using ${toLedgerVersion} instead`,\n        )\n      } else {\n        toLedgerVersion = requestedTo\n      }\n    }\n    return {\n      from: fromLedgerVersion,\n      to: toLedgerVersion,\n    }\n  }\n\n  async retrieveBalanceActivities(\n    address: string,\n    callbackFn: BalanceActivityCallback,\n    options: GetBalanceActivityOptions = {},\n  ): Promise<RetrieveBalanceActivitiesResult> {\n    assertValidAddress(address)\n    const { from, to } = await this.resolveFromToLedgers(options)\n    const limit = 10\n    let lastTx: FormattedTransactionType | undefined\n    let transactions: FormattedTransactionType[] | undefined\n    while (\n      isUndefined(transactions) ||\n      (transactions.length === limit && lastTx && lastTx.outcome.ledgerVersion <= to)\n    ) {\n      const getTransactionOptions: TransactionsOptions = {\n        earliestFirst: true,\n        excludeFailures: false,\n        limit,\n      }\n      if (lastTx) {\n        getTransactionOptions.start = lastTx.id\n      } else {\n        getTransactionOptions.minLedgerVersion = from\n        getTransactionOptions.maxLedgerVersion = to\n      }\n      transactions = await this.retryDced(() => this.rippleApi.getTransactions(address, getTransactionOptions))\n      this.logger.debug(`retrieved ripple txs for ${address}`, transactions)\n      for (let tx of transactions) {\n        if ((lastTx && tx.id === lastTx.id) || tx.outcome.ledgerVersion < from || tx.outcome.ledgerVersion > to) {\n          continue\n        }\n        const activity = await this.txToBalanceActivity(address, tx)\n        if (activity) {\n          await callbackFn(activity)\n        }\n      }\n      lastTx = transactions[transactions.length - 1]\n    }\n    return { from, to }\n  }\n\n  private isPaymentTx(tx: FormattedTransactionType): tx is FormattedPaymentTransaction {\n    return tx.type === 'payment'\n  }\n\n  private async txToBalanceActivity(address: string, tx: FormattedTransactionType): Promise<BalanceActivity | null> {\n    if (!tx.outcome) {\n      this.logger.warn('txToBalanceActivity received tx object without outcome!', tx)\n      return null\n    }\n    const txResult = tx.outcome.result\n    if (!isString(txResult) || !(txResult.startsWith('tes') || txResult.startsWith('tec'))) {\n      this.logger.log(`No balance activity for ripple tx ${tx.id} because status is ${txResult}`)\n      return null\n    }\n    const confirmationNumber = tx.outcome.ledgerVersion\n    const primarySequence = padLeft(String(tx.outcome.ledgerVersion), 12, '0')\n    const secondarySequence = padLeft(String(tx.outcome.indexInLedger), 8, '0')\n    const ledger = await this.retryDced(() => this.rippleApi.getLedger({ ledgerVersion: confirmationNumber }))\n    const balanceChange = (tx.outcome.balanceChanges[address] || []).find(({ currency }) => currency === 'XRP')\n    if (!balanceChange) {\n      this.logger.log(\n        `Cannot determine balanceChange for address ${address} in ripple tx ${tx.id} because there's no XRP entry`,\n      )\n      return null\n    }\n    const amount = balanceChange.value\n    const assetSymbol = balanceChange.currency\n    const type = amount.startsWith('-') ? 'out' : 'in'\n    const tag = this.isPaymentTx(tx)\n      ? (type === 'out' ? tx.specification.source : tx.specification.destination).tag\n      : undefined\n    const tertiarySequence = type === 'out' ? '00' : '01'\n    const activitySequence = `${primarySequence}.${secondarySequence}.${tertiarySequence}`\n    return {\n      type,\n      networkType: this.networkType,\n      networkSymbol: 'XRP',\n      assetSymbol,\n      address: address,\n      extraId: !isUndefined(tag) ? String(tag) : null,\n\n      amount,\n\n      externalId: tx.id,\n      activitySequence,\n      confirmationId: ledger.ledgerHash,\n      confirmationNumber,\n      timestamp: new Date(ledger.closeTime),\n    }\n  }\n}\n","import { PaymentsFactory } from '@faast/payments-common'\n\nimport { RipplePaymentsConfig, HdRipplePaymentsConfig, AccountRipplePaymentsConfig } from './types'\nimport { HdRipplePayments } from './HdRipplePayments'\nimport { AccountRipplePayments } from './AccountRipplePayments'\nimport { assertType } from '@faast/ts-common'\n\nexport class RipplePaymentsFactory implements PaymentsFactory<RipplePaymentsConfig> {\n  forConfig(config: HdRipplePaymentsConfig): HdRipplePayments\n  forConfig(config: AccountRipplePaymentsConfig): AccountRipplePayments\n  forConfig(config: RipplePaymentsConfig) {\n    if (AccountRipplePaymentsConfig.is(config)) {\n      return new AccountRipplePayments(config)\n    }\n    return new HdRipplePayments(assertType(HdRipplePaymentsConfig, config))\n  }\n}\n\nexport default RipplePaymentsFactory\n"],"names":["extendCodec","BaseConfig","t.union","t.string","instanceofCodec","RippleAPI","t.nullType","t.number","t.type","BaseUnsignedTransaction","BaseSignedTransaction","BaseTransactionInfo","nullable","BaseBroadcastResult","t.boolean","t.object","CreateTransactionOptions","createUnitConverters","isNil","assertType","NetworkType","DelegateLogger","Payport","isString","omit","FeeLevel","TransactionStatus","FeeRateType","fromBase58","fromSeed","BalanceMonitor","isUndefined","isNumber"],"mappings":"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"}