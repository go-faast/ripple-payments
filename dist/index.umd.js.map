{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/constants.ts","../src/helpers.ts","../src/RipplePaymentsUtils.ts","../src/utils.ts","../src/BaseRipplePayments.ts","../src/bip44.ts","../src/HdRipplePayments.ts","../src/AccountRipplePayments.ts","../src/RippleBalanceMonitor.ts","../src/RipplePaymentsFactory.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { extendCodec, Logger, instanceofCodec, nullable } from '@faast/ts-common'\nimport {\n  BaseTransactionInfo,\n  BaseUnsignedTransaction,\n  BaseSignedTransaction,\n  BaseBroadcastResult,\n  CreateTransactionOptions,\n  BaseConfig,\n  Payport,\n  FromTo,\n} from '@faast/payments-common'\nimport { FormattedTransactionType as RippleTransaction, RippleAPI } from 'ripple-lib'\nimport { KeyPair } from 'ripple-lib/dist/npm/transaction/types'\nimport { AccountRipplePayments } from './AccountRipplePayments'\n\ntype PromiseValue<T> = T extends Promise<infer X> ? X : never\ntype RippleLedger = PromiseValue<ReturnType<RippleAPI['getLedger']>>\n\nexport { RippleTransaction, RippleLedger, CreateTransactionOptions }\n\nexport type TransactionInfoRaw = RippleTransaction & {\n  currentLedger: RippleLedger\n}\n\nexport const BaseRippleConfig = extendCodec(\n  BaseConfig,\n  {},\n  {\n    server: t.union([t.string, instanceofCodec(RippleAPI), t.nullType]),\n  },\n  'BaseRippleConfig',\n)\nexport type BaseRippleConfig = t.TypeOf<typeof BaseRippleConfig>\n\nexport const RippleBalanceMonitorConfig = BaseRippleConfig\nexport type RippleBalanceMonitorConfig = t.TypeOf<typeof RippleBalanceMonitorConfig>\n\nexport const BaseRipplePaymentsConfig = extendCodec(\n  BaseRippleConfig,\n  {},\n  {\n    maxLedgerVersionOffset: t.number, // number of ledgers until a tx expires\n  },\n  'BaseRipplePaymentsConfig',\n)\nexport type BaseRipplePaymentsConfig = t.TypeOf<typeof BaseRipplePaymentsConfig>\n\nexport const HdRipplePaymentsConfig = extendCodec(\n  BaseRipplePaymentsConfig,\n  {\n    hdKey: t.string, // xprv or xpub\n  },\n  'HdRipplePaymentsConfig',\n)\nexport type HdRipplePaymentsConfig = t.TypeOf<typeof HdRipplePaymentsConfig>\n\nexport const RippleKeyPair = t.type(\n  {\n    publicKey: t.string,\n    privateKey: t.string,\n  },\n  'RippleKeyPair',\n)\nexport type RippleKeyPair = t.TypeOf<typeof RippleKeyPair>\n\nexport const RippleSecretPair = t.type(\n  {\n    address: t.string,\n    secret: t.string,\n  },\n  'RippleSecretPair',\n)\nexport type RippleSecretPair = t.TypeOf<typeof RippleSecretPair>\n\n/**\n * address, or secret+address, or public+private key\n */\nexport const RippleAccountConfig = t.union([t.string, RippleSecretPair, RippleKeyPair], 'RippleAccountConfig')\nexport type RippleAccountConfig = t.TypeOf<typeof RippleAccountConfig>\n\nexport const AccountRipplePaymentsConfig = extendCodec(\n  BaseRipplePaymentsConfig,\n  {\n    hotAccount: RippleAccountConfig,\n    depositAccount: RippleAccountConfig,\n  },\n  'AccountRipplePaymentsConfig',\n)\nexport type AccountRipplePaymentsConfig = t.TypeOf<typeof AccountRipplePaymentsConfig>\n\nexport const RipplePaymentsConfig = t.union(\n  [HdRipplePaymentsConfig, AccountRipplePaymentsConfig],\n  'RipplePaymentsConfig',\n)\nexport type RipplePaymentsConfig = t.TypeOf<typeof RipplePaymentsConfig>\n\nexport const RippleUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    amount: t.string,\n    fee: t.string,\n  },\n  'RippleUnsignedTransaction',\n)\nexport type RippleUnsignedTransaction = t.TypeOf<typeof RippleUnsignedTransaction>\n\nexport const RippleSignedTransaction = extendCodec(\n  BaseSignedTransaction,\n  {\n    id: t.string,\n  },\n  'RippleSignedTransaction',\n)\nexport type RippleSignedTransaction = t.TypeOf<typeof RippleSignedTransaction>\n\nexport const RippleTransactionInfo = extendCodec(\n  BaseTransactionInfo,\n  {\n    confirmationNumber: nullable(t.number),\n  },\n  {},\n  'RippleTransactionInfo',\n)\nexport type RippleTransactionInfo = t.TypeOf<typeof RippleTransactionInfo>\n\nexport const RippleBroadcastResult = extendCodec(\n  BaseBroadcastResult,\n  {\n    rebroadcast: t.boolean,\n    data: t.object,\n  },\n  'RippleBroadcastResult',\n)\nexport type RippleBroadcastResult = t.TypeOf<typeof RippleBroadcastResult>\n\nexport const RippleCreateTransactionOptions = extendCodec(\n  CreateTransactionOptions,\n  {},\n  {\n    maxLedgerVersionOffset: t.number,\n    sequence: t.number,\n    payportBalance: t.string,\n  },\n  'RippleCreateTransactionOptions',\n)\nexport type RippleCreateTransactionOptions = t.TypeOf<typeof RippleCreateTransactionOptions>\n\nexport type FromToWithPayport = FromTo & {\n  fromPayport: Payport\n  toPayport: Payport\n}\n\nexport type RippleSignatory = {\n  address: string\n  secret: string | KeyPair\n}\n","import { FeeLevel } from '@faast/payments-common'\nimport { RippleCreateTransactionOptions } from './types'\n\nexport const PACKAGE_NAME = 'ripple-payments'\n\nexport const DECIMAL_PLACES = 6\nexport const MIN_BALANCE = 20\nexport const DEFAULT_CREATE_TRANSACTION_OPTIONS: RippleCreateTransactionOptions = {}\nexport const DEFAULT_MAX_LEDGER_VERSION_OFFSET = 100 // ~6min\n\n/**\n * Source: https://github.com/ripple/ripple-lib/blob/develop/src/common/schemas/objects/address.json\n */\nexport const ADDRESS_REGEX = /^r[1-9A-HJ-NP-Za-km-z]{25,34}$/\n\nexport const EXTRA_ID_REGEX = /^[0-9]+$/\n\n/**\n * Source: crypto-regex\n */\nexport const XPUB_REGEX = /^xpub[a-km-zA-HJ-NP-Z1-9]{100,108}$/\nexport const XPRV_REGEX = /^xprv[a-km-zA-HJ-NP-Z1-9]{100,108}$/\n\nexport const NOT_FOUND_ERRORS = ['MissingLedgerHistoryError', 'NotFoundError']\n\nexport const DEFAULT_MAINNET_SERVER = 'wss://s1.ripple.com'\nexport const DEFAULT_TESTNET_SERVER = 'wss://s.altnet.rippletest.net:51233'\n","import { createUnitConverters } from '@faast/payments-common'\nimport { DECIMAL_PLACES, XPRV_REGEX, XPUB_REGEX, ADDRESS_REGEX, EXTRA_ID_REGEX } from './constants'\nimport { isNil } from '@faast/ts-common'\n\nconst {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n} = createUnitConverters(DECIMAL_PLACES)\n\nexport {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n}\n\nexport function isValidXprv(xprv: unknown): boolean {\n  return typeof xprv === 'string' && XPRV_REGEX.test(xprv)\n}\n\nexport function isValidXpub(xpub: unknown): boolean {\n  return typeof xpub === 'string' && XPUB_REGEX.test(xpub)\n}\n\nexport function isValidAddress(address: unknown): boolean {\n  return typeof address === 'string' && ADDRESS_REGEX.test(address)\n}\n\nexport function isValidExtraId(extraId: unknown): boolean {\n  return typeof extraId === 'string' && EXTRA_ID_REGEX.test(extraId)\n}\n\nexport function assertValidAddress(address: string): void {\n  if (!isValidAddress(address)) {\n    throw new Error(`Invalid ripple address: ${address}`)\n  }\n}\n\nexport function assertValidExtraId(extraId: string): void {\n  if (!isValidExtraId(extraId)) {\n    throw new Error(`Invalid ripple extraId: ${extraId}`)\n  }\n}\n\nexport function assertValidExtraIdOrNil(extraId?: string | undefined | null): void {\n  if (!isNil(extraId) && !isValidExtraId(extraId)) {\n    throw new Error(`Invalid ripple extraId: ${extraId}`)\n  }\n}\n","import { PaymentsUtils, BaseConfig, NetworkType, Payport } from '@faast/payments-common'\nimport {\n  toMainDenominationString,\n  toBaseDenominationString,\n  isValidXprv,\n  isValidXpub,\n  isValidAddress,\n  isValidExtraId,\n} from './helpers'\nimport { Logger, DelegateLogger, isNil, assertType } from '@faast/ts-common'\nimport { PACKAGE_NAME } from './constants'\n\nexport class RipplePaymentsUtils implements PaymentsUtils {\n  networkType: NetworkType\n  logger: Logger\n\n  constructor(config: BaseConfig = {}) {\n    assertType(BaseConfig, config)\n    this.networkType = config.network || NetworkType.Mainnet\n    this.logger = new DelegateLogger(config.logger, PACKAGE_NAME)\n  }\n\n  async isValidExtraId(extraId: string): Promise<boolean> {\n    return isValidExtraId(extraId)\n  }\n\n  async isValidAddress(address: string): Promise<boolean> {\n    return isValidAddress(address)\n  }\n\n  async isValidPayport(payport: Payport): Promise<boolean> {\n    if (!Payport.is(payport)) {\n      return false\n    }\n    const { address, extraId } = payport\n    return (await this.isValidAddress(address)) && (isNil(extraId) ? true : this.isValidExtraId(extraId))\n  }\n\n  toMainDenomination(amount: string | number): string {\n    return toMainDenominationString(amount)\n  }\n\n  toBaseDenomination(amount: string | number): string {\n    return toBaseDenominationString(amount)\n  }\n\n  isValidXprv = isValidXprv\n  isValidXpub = isValidXpub\n}\n","import { BaseRippleConfig } from './types'\nimport { RippleAPI } from 'ripple-lib'\nimport { isString } from 'util'\nimport { NetworkType } from '@faast/payments-common'\nimport { DEFAULT_TESTNET_SERVER, DEFAULT_MAINNET_SERVER } from './constants'\n\nexport function padLeft(x: string, n: number, v: string): string {\n  while (x.length < n) {\n    x = `${v}${x}`\n  }\n  return x\n}\n\nexport function resolveRippleServer(server: BaseRippleConfig['server'], network: NetworkType): RippleAPI {\n  if (typeof server === 'undefined') {\n    server = network === NetworkType.Testnet ? DEFAULT_TESTNET_SERVER : DEFAULT_MAINNET_SERVER\n  }\n  if (isString(server)) {\n    return new RippleAPI({\n      server: server,\n    })\n  } else if (server instanceof RippleAPI) {\n    return server\n  } else {\n    // null server -> offline mode\n    return new RippleAPI()\n  }\n}\n","import {\n  BasePayments,\n  BalanceResult,\n  CreateTransactionOptions,\n  FeeOption,\n  ResolvedFeeOption,\n  FromTo,\n  Payport,\n  FeeLevel,\n  FeeRateType,\n  TransactionStatus,\n  ResolveablePayport,\n} from '@faast/payments-common'\nimport { Logger, assertType, isNil, Numeric } from '@faast/ts-common'\nimport BigNumber from 'bignumber.js'\nimport { RippleAPI } from 'ripple-lib'\nimport { FormattedPaymentTransaction, FormattedPayment, Prepare } from 'ripple-lib/dist/npm/transaction/types'\nimport { Adjustment, Amount } from 'ripple-lib/dist/npm/common/types/objects'\n\nimport {\n  BaseRipplePaymentsConfig,\n  RippleUnsignedTransaction,\n  RippleSignedTransaction,\n  RippleBroadcastResult,\n  RippleTransactionInfo,\n  RippleCreateTransactionOptions,\n  FromToWithPayport,\n  RippleSignatory,\n} from './types'\nimport { RipplePaymentsUtils } from './RipplePaymentsUtils'\nimport {\n  DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  MIN_BALANCE,\n  DEFAULT_MAX_LEDGER_VERSION_OFFSET,\n  NOT_FOUND_ERRORS,\n} from './constants'\nimport { assertValidAddress, assertValidExtraIdOrNil, toBaseDenominationBigNumber } from './helpers'\nimport { isString } from 'util'\nimport { resolveRippleServer } from './utils'\n\nfunction extraIdToTag(extraId: string | null | undefined): number | undefined {\n  return isNil(extraId) ? undefined : Number.parseInt(extraId)\n}\nfunction serializePayport(payport: Payport): string {\n  return isNil(payport.extraId) ? payport.address : `${payport.address}:${payport.extraId}`\n}\n\nexport abstract class BaseRipplePayments<Config extends BaseRipplePaymentsConfig> extends RipplePaymentsUtils\n  implements\n    BasePayments<\n      Config,\n      RippleUnsignedTransaction,\n      RippleSignedTransaction,\n      RippleBroadcastResult,\n      RippleTransactionInfo\n    > {\n  readonly rippleApi: RippleAPI\n  readonly logger: Logger\n\n  constructor(public readonly config: Config) {\n    super(config)\n    assertType(BaseRipplePaymentsConfig, config)\n    this.rippleApi = resolveRippleServer(config.server, this.networkType)\n  }\n\n  async init(): Promise<void> {\n    if (!this.rippleApi.isConnected()) {\n      await this.rippleApi.connect()\n    }\n  }\n\n  async destroy(): Promise<void> {\n    if (this.rippleApi.isConnected()) {\n      await this.rippleApi.disconnect()\n    }\n  }\n\n  getFullConfig() {\n    return this.config\n  }\n\n  abstract getPublicConfig(): Config\n\n  abstract getAccountIds(): string[]\n\n  abstract getAccountId(index: number): string\n\n  abstract getHotSignatory(): RippleSignatory\n\n  abstract getDepositSignatory(): RippleSignatory\n\n  abstract isReadOnly(): boolean\n\n  private doGetPayport(index: number): Payport {\n    if (index === 0) {\n      return { address: this.getHotSignatory().address }\n    }\n    if (index === 1) {\n      return { address: this.getDepositSignatory().address }\n    }\n    return { address: this.getDepositSignatory().address, extraId: String(index) }\n  }\n\n  private doResolvePayport(payport: ResolveablePayport): Payport {\n    if (typeof payport === 'number') {\n      return this.doGetPayport(payport)\n    } else if (typeof payport === 'string') {\n      assertValidAddress(payport)\n      return { address: payport }\n    }\n    assertValidAddress(payport.address)\n    assertValidExtraIdOrNil(payport.extraId)\n    return payport\n  }\n\n  async resolvePayport(payport: ResolveablePayport): Promise<Payport> {\n    return this.doResolvePayport(payport)\n  }\n\n  async resolveFromTo(from: number, to: ResolveablePayport): Promise<FromToWithPayport> {\n    const fromPayport = await this.getPayport(from)\n    const toPayport = await this.resolvePayport(to)\n    return {\n      fromAddress: fromPayport.address,\n      fromIndex: from,\n      fromExtraId: fromPayport.extraId,\n      fromPayport,\n      toAddress: toPayport.address,\n      toIndex: typeof to === 'number' ? to : null,\n      toExtraId: toPayport.extraId,\n      toPayport,\n    }\n  }\n\n  async getPayport(index: number): Promise<Payport> {\n    return this.doGetPayport(index)\n  }\n\n  requiresBalanceMonitor() {\n    return true\n  }\n\n  getAddressesToMonitor(): string[] {\n    return [this.getHotSignatory().address, this.getDepositSignatory().address]\n  }\n\n  isSweepableAddressBalance(balance: Numeric): boolean {\n    return new BigNumber(balance).gt(MIN_BALANCE)\n  }\n\n  isSweepableBalance(balance: string, payport?: ResolveablePayport): boolean {\n    const balanceBase = toBaseDenominationBigNumber(balance)\n    if (payport) {\n      payport = this.doResolvePayport(payport)\n      if (isNil(payport.extraId)) {\n        return this.isSweepableAddressBalance(balanceBase)\n      }\n    }\n    return balanceBase.gt(0)\n  }\n\n  async getBalance(payportOrIndex: ResolveablePayport): Promise<BalanceResult> {\n    const payport = await this.resolvePayport(payportOrIndex)\n    const { address, extraId } = payport\n    if (!isNil(extraId)) {\n      throw new Error(`Cannot getBalance of ripple payport with extraId ${extraId}, use BalanceMonitor instead`)\n    }\n    const balances = await this.rippleApi.getBalances(address)\n    const xrpBalance = balances.find(({ currency }) => currency === 'XRP')\n    const xrpAmount = xrpBalance ? xrpBalance.value : '0'\n    return {\n      confirmedBalance: xrpAmount,\n      unconfirmedBalance: '0',\n      sweepable: this.isSweepableAddressBalance(xrpAmount),\n    }\n  }\n\n  resolveIndexFromAdjustment(adjustment: Adjustment): number | null {\n    const { address, tag } = adjustment\n    if (address === this.getHotSignatory().address) {\n      return 0\n    } else if (address === this.getDepositSignatory().address) {\n      return tag || 1\n    }\n    return null\n  }\n\n  async getTransactionInfo(txId: string): Promise<RippleTransactionInfo> {\n    let tx\n    try {\n      tx = await this.rippleApi.getTransaction(txId)\n    } catch (e) {\n      const eString = e.toString()\n      if (NOT_FOUND_ERRORS.some(type => eString.includes(type))) {\n        throw new Error(`Transaction not found: ${eString}`)\n      }\n      throw e\n    }\n    this.logger.debug('tx', JSON.stringify(tx, null, 2))\n    if (tx.type !== 'payment') {\n      throw new Error(`Unsupported ripple tx type ${tx.type}`)\n    }\n    const { specification, outcome } = tx as FormattedPaymentTransaction\n    const { source, destination } = specification\n    const amountObject = ((source as any).maxAmount || source.amount) as Amount\n    if (amountObject.currency !== 'XRP') {\n      throw new Error(`Unsupported ripple tx currency ${amountObject.currency}`)\n    }\n    const fromIndex = this.resolveIndexFromAdjustment(source)\n    const toIndex = this.resolveIndexFromAdjustment(destination)\n    const amount = amountObject.value\n    const status = outcome.result.startsWith('tes') ? TransactionStatus.Confirmed : TransactionStatus.Failed\n    const confirmationNumber = outcome.ledgerVersion\n    const ledger = await this.rippleApi.getLedger({ ledgerVersion: confirmationNumber })\n    const currentLedgerVersion = await this.rippleApi.getLedgerVersion()\n    const confirmationId = ledger.ledgerHash\n    const confirmationTimestamp = outcome.timestamp ? new Date(outcome.timestamp) : null\n    return {\n      id: tx.id,\n      fromIndex,\n      fromAddress: source.address,\n      fromExtraId: typeof source.tag !== 'undefined' ? String(source.tag) : null,\n      toIndex,\n      toAddress: destination.address,\n      toExtraId: typeof destination.tag !== 'undefined' ? String(destination.tag) : null,\n      amount: amount,\n      fee: outcome.fee,\n      status,\n      confirmationId,\n      confirmationNumber: ledger.ledgerVersion,\n      confirmationTimestamp,\n      isExecuted: status === 'confirmed',\n      isConfirmed: true,\n      confirmations: currentLedgerVersion - confirmationNumber,\n      data: tx,\n    }\n  }\n\n  async resolveFeeOption(feeOption: FeeOption): Promise<ResolvedFeeOption> {\n    let targetFeeLevel\n    let targetFeeRate\n    let targetFeeRateType\n    let feeMain: string\n    let feeBase: string\n    if (feeOption.feeLevel === FeeLevel.Custom) {\n      targetFeeLevel = feeOption.feeLevel\n      targetFeeRate = feeOption.feeRate\n      targetFeeRateType = feeOption.feeRateType\n      if (targetFeeRateType === FeeRateType.Base) {\n        feeBase = targetFeeRate\n        feeMain = this.toMainDenomination(feeBase)\n      } else if (targetFeeRateType === FeeRateType.Main) {\n        feeMain = targetFeeRate\n        feeBase = this.toBaseDenomination(feeMain)\n      } else {\n        throw new Error(`Unsupport ripple feeRateType ${feeOption.feeRateType}`)\n      }\n    } else {\n      targetFeeLevel = feeOption.feeLevel || FeeLevel.Medium\n      let cushion: number | undefined\n      if (targetFeeLevel === FeeLevel.Low) {\n        cushion = 1\n      } else if (targetFeeLevel === FeeLevel.Medium) {\n        cushion = 1.2\n      } else if (targetFeeLevel === FeeLevel.High) {\n        cushion = 1.5\n      }\n      feeMain = await this.rippleApi.getFee(cushion)\n      feeBase = this.toBaseDenomination(feeMain)\n      targetFeeRate = feeMain\n      targetFeeRateType = FeeRateType.Main\n    }\n    return {\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      feeMain,\n      feeBase,\n    }\n  }\n\n  private async resolvePayportBalance(\n    fromPayport: Payport,\n    options: RippleCreateTransactionOptions,\n  ): Promise<BigNumber> {\n    if (isNil(fromPayport.extraId)) {\n      const balances = await this.getBalance(fromPayport)\n      return new BigNumber(balances.confirmedBalance)\n    }\n    if (typeof options.payportBalance !== 'string') {\n      throw new Error('ripple-payments createSweepTransaction missing required payportBalance option')\n    }\n    const payportBalance = new BigNumber(options.payportBalance)\n    if (payportBalance.isNaN()) {\n      throw new Error(`Invalid NaN payportBalance option provided: ${options.payportBalance}`)\n    }\n    return payportBalance\n  }\n\n  private async doCreateTransaction(\n    fromTo: FromTo,\n    feeOption: ResolvedFeeOption,\n    amount: BigNumber,\n    payportBalance: BigNumber,\n    options: RippleCreateTransactionOptions,\n  ): Promise<RippleUnsignedTransaction> {\n    if (amount.isNaN() || amount.lte(0)) {\n      throw new Error(`Invalid amount provided to ripple-payments createTransaction: ${amount}`)\n    }\n    const { fromIndex, fromAddress, fromExtraId, fromPayport, toIndex, toAddress, toExtraId } = fromTo\n    if (fromAddress === toAddress) {\n      throw new Error('Cannot create XRP payment transaction sending XRP to self')\n    }\n    const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeMain } = feeOption\n    const { sequence } = options\n    const maxLedgerVersionOffset =\n      options.maxLedgerVersionOffset || this.config.maxLedgerVersionOffset || DEFAULT_MAX_LEDGER_VERSION_OFFSET\n    const amountString = amount.toString()\n    const addressBalances = await this.getBalance({ address: fromAddress })\n    const addressBalance = new BigNumber(addressBalances.confirmedBalance)\n    if (addressBalance.lt(MIN_BALANCE)) {\n      throw new Error(\n        `Cannot send from ripple address that has less than ${MIN_BALANCE} XRP: ${fromAddress} (${addressBalance} XRP)`,\n      )\n    }\n    const totalValue = amount.plus(feeMain)\n    if (addressBalance.minus(totalValue).lt(MIN_BALANCE)) {\n      throw new Error(\n        `Cannot send ${amountString} XRP with fee of ${feeMain} XRP because it would reduce the balance below ` +\n          `the minimum required balance of ${MIN_BALANCE} XRP: ${fromAddress} (${addressBalance} XRP)`,\n      )\n    }\n    if (typeof fromExtraId === 'string' && totalValue.gt(payportBalance)) {\n      throw new Error(\n        `Insufficient payport balance of ${payportBalance} XRP to send ${amountString} XRP ` +\n          `with fee of ${feeMain} XRP: ${serializePayport(fromPayport)}`,\n      )\n    }\n    const preparedTx = await this.rippleApi.preparePayment(\n      fromAddress,\n      {\n        source: {\n          address: fromAddress,\n          tag: extraIdToTag(fromExtraId),\n          maxAmount: {\n            currency: 'XRP',\n            value: amountString,\n          },\n        },\n        destination: {\n          address: toAddress,\n          tag: extraIdToTag(toExtraId),\n          amount: {\n            currency: 'XRP',\n            value: amountString,\n          },\n        },\n      },\n      {\n        maxLedgerVersionOffset,\n        sequence,\n      },\n    )\n    return {\n      id: null,\n      fromIndex,\n      fromAddress,\n      fromExtraId,\n      toIndex,\n      toAddress,\n      toExtraId,\n      amount: amountString,\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      fee: feeMain,\n      status: TransactionStatus.Unsigned,\n      data: preparedTx,\n    }\n  }\n\n  async createTransaction(\n    from: number,\n    to: ResolveablePayport,\n    amount: string,\n    options: RippleCreateTransactionOptions = DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  ): Promise<RippleUnsignedTransaction> {\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options)\n    const payportBalance = await this.resolvePayportBalance(fromTo.fromPayport, options)\n    const amountBn = new BigNumber(amount)\n    return this.doCreateTransaction(fromTo, feeOption, amountBn, payportBalance, options)\n  }\n\n  async createSweepTransaction(\n    from: number,\n    to: ResolveablePayport,\n    options: RippleCreateTransactionOptions = DEFAULT_CREATE_TRANSACTION_OPTIONS,\n  ): Promise<RippleUnsignedTransaction> {\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options)\n    const payportBalance = await this.resolvePayportBalance(fromTo.fromPayport, options)\n    let amountBn = payportBalance.minus(feeOption.feeMain)\n    if (amountBn.lt(0)) {\n      const fromPayport = { address: fromTo.fromAddress, extraId: fromTo.fromExtraId }\n      throw new Error(\n        `Insufficient balance to sweep from ripple payport with fee of ${feeOption.feeMain} XRP: ` +\n          `${serializePayport(fromPayport)} (${payportBalance} XRP)`,\n      )\n    }\n    if (typeof fromTo.fromExtraId !== 'string') {\n      amountBn = amountBn.minus(MIN_BALANCE)\n      if (amountBn.lt(0)) {\n        throw new Error(\n          `Insufficient balance to sweep from ripple address with fee of ${feeOption.feeMain} XRP and ` +\n            `maintain the minimum required balance of ${MIN_BALANCE} XRP: ` +\n            `${fromTo.fromAddress} (${payportBalance} XRP)`,\n        )\n      }\n    }\n    return this.doCreateTransaction(fromTo, feeOption, amountBn, payportBalance, options)\n  }\n\n  async signTransaction(unsignedTx: RippleUnsignedTransaction): Promise<RippleSignedTransaction> {\n    assertType(RippleUnsignedTransaction, unsignedTx)\n    if (this.isReadOnly()) {\n      throw new Error('Cannot sign transaction with read only ripple payments (no xprv or secrets provided)')\n    }\n    this.logger.debug(unsignedTx.data)\n    const { txJSON } = unsignedTx.data as Prepare\n    let secret\n    const hotSignatory = this.getHotSignatory()\n    const depositSignatory = this.getDepositSignatory()\n    if (unsignedTx.fromAddress === hotSignatory.address) {\n      secret = hotSignatory.secret\n    } else if (unsignedTx.fromAddress === depositSignatory.address) {\n      secret = depositSignatory.secret\n    } else {\n      throw new Error(`Cannot sign ripple transaction from address ${unsignedTx.fromAddress}`)\n    }\n    const signResult = this.rippleApi.sign(txJSON, secret)\n    return {\n      ...unsignedTx,\n      id: signResult.id,\n      data: signResult,\n      status: TransactionStatus.Signed,\n    }\n  }\n\n  async broadcastTransaction(signedTx: RippleSignedTransaction): Promise<RippleBroadcastResult> {\n    assertType(RippleSignedTransaction, signedTx)\n    const signedTxString = (signedTx.data as any).signedTransaction as string\n    let rebroadcast: boolean = false\n    try {\n      const existing = await this.getTransactionInfo(signedTx.id)\n      rebroadcast = existing.id === signedTx.id\n    } catch (e) {}\n    const result = (await this.rippleApi.submit(signedTxString)) as any\n    this.logger.debug('broadcasted', result)\n    const resultCode = result.engine_result || result.resultCode || ''\n    if (!resultCode.startsWith('tes')) {\n      throw new Error(`Failed to broadcast ripple tx ${signedTx.id} with result code ${resultCode}`)\n    }\n    return {\n      id: signedTx.id,\n      rebroadcast,\n      data: result,\n    }\n  }\n}\n","// Many parts of this code are snippets from tronWeb:\n// https://github.com/tronprotocol/tron-web/blob/master/src/index.js\n\nimport { BIP32Interface as HDNode, fromBase58, fromSeed } from 'bip32'\nimport baseX from 'base-x'\nimport { padLeft } from './utils'\nimport crypto from 'crypto'\nimport { RippleSignatory } from './types'\n\nexport const RIPPLE_B58_DICT = 'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\nexport const base58 = baseX(RIPPLE_B58_DICT)\n\nexport const derivationPath = \"m/44'/144'/0'\"\nconst derivationPathParts = derivationPath.split('/').slice(1)\n\nexport function deriveSignatory(hdKey: string, index: number): RippleSignatory {\n  const key = fromBase58(hdKey)\n  const derived = deriveBasePath(key)\n    .derive(0)\n    .derive(index)\n  const privateKey = derived.isNeutered() ? '' : hdNodeToPrivateKey(derived)\n  const publicKey = hdNodeToPublicKey(derived)\n  const address = publicKeyToAddress(publicKey)\n  return {\n    address,\n    secret: {\n      privateKey,\n      publicKey,\n    },\n  }\n}\n\nexport function xprvToXpub(xprv: string | HDNode): string {\n  const key = typeof xprv === 'string' ? fromBase58(xprv) : xprv\n  const derivedPubKey = deriveBasePath(key)\n  return derivedPubKey.neutered().toBase58()\n}\n\nexport function generateNewKeys(): { xpub: string; xprv: string } {\n  const key = fromSeed(crypto.randomBytes(32))\n  const xprv = key.toBase58()\n  const xpub = xprvToXpub(xprv)\n  return {\n    xprv,\n    xpub,\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction deriveBasePath(key: HDNode): HDNode {\n  const parts = derivationPathParts.slice(key.depth)\n  if (parts.length > 0) {\n    return key.derivePath(`m/${parts.join('/')}`)\n  }\n  return key\n}\n\nexport function hdNodeToPublicKey(key: HDNode): string {\n  const hexKey = padLeft(key.publicKey.toString('hex'), 66, '0')\n  return hexKey.toUpperCase()\n}\n\nexport function hdNodeToPrivateKey(key: HDNode): string {\n  if (key.isNeutered() || typeof key.privateKey === 'undefined') {\n    throw new Error('Cannot derive private key from neutered bip32 node')\n  }\n  const hexKey = padLeft(key.privateKey.toString('hex'), 64, '0')\n  return hexKey.toUpperCase()\n}\n\n/**\n * Source: https://xrpl.org/accounts.html#address-encoding\n */\nexport function publicKeyToAddress(pubkeyHex: string): string {\n  const pubkeyBuffer = Buffer.from(pubkeyHex, 'hex')\n  const pubkeyInnerHash = crypto.createHash('sha256').update(pubkeyBuffer)\n  const pubkeyOuterHash = crypto.createHash('ripemd160')\n  pubkeyOuterHash.update(pubkeyInnerHash.digest())\n  const accountId = pubkeyOuterHash.digest()\n  const addressTypePrefix = Buffer.from([0x00])\n  const payload = Buffer.concat([addressTypePrefix, accountId])\n  const chksumHash1 = crypto\n    .createHash('sha256')\n    .update(payload)\n    .digest()\n  const chksumHash2 = crypto\n    .createHash('sha256')\n    .update(chksumHash1)\n    .digest()\n  const checksum = chksumHash2.slice(0, 4)\n  const dataToEncode = Buffer.concat([payload, checksum])\n  const address = base58.encode(dataToEncode)\n  return address\n}\n","import { HdRipplePaymentsConfig, RippleSignatory } from './types'\nimport { BaseRipplePayments } from './BaseRipplePayments'\nimport { xprvToXpub, generateNewKeys, deriveSignatory } from './bip44'\nimport { isValidXprv, isValidXpub } from './helpers'\n\nexport class HdRipplePayments extends BaseRipplePayments<HdRipplePaymentsConfig> {\n  readonly xprv: string | null\n  readonly xpub: string\n  readonly hotSignatory: RippleSignatory\n  readonly depositSignatory: RippleSignatory\n\n  constructor(config: HdRipplePaymentsConfig) {\n    super(config)\n    if (isValidXprv(config.hdKey)) {\n      this.xprv = config.hdKey\n      this.xpub = xprvToXpub(this.xprv)\n    } else if (isValidXpub(config.hdKey)) {\n      this.xprv = null\n      this.xpub = config.hdKey\n    } else {\n      throw new Error('Account must be a valid xprv or xpub')\n    }\n    this.hotSignatory = deriveSignatory(config.hdKey, 0)\n    this.depositSignatory = deriveSignatory(config.hdKey, 1)\n  }\n\n  static generateNewKeys = generateNewKeys\n\n  isReadOnly() {\n    return this.xprv === null\n  }\n\n  getPublicConfig() {\n    return {\n      ...this.config,\n      hdKey: xprvToXpub(this.config.hdKey),\n    }\n  }\n\n  getAccountIds(): string[] {\n    return [this.xpub]\n  }\n\n  getAccountId(index: number): string {\n    return this.xpub\n  }\n\n  getHotSignatory() {\n    return this.hotSignatory\n  }\n\n  getDepositSignatory() {\n    return this.depositSignatory\n  }\n}\n","import {\n  AccountRipplePaymentsConfig,\n  RippleSignatory,\n  RippleAccountConfig,\n  RippleKeyPair,\n  RippleSecretPair,\n} from './types'\nimport { BaseRipplePayments } from './BaseRipplePayments'\nimport { assertType } from '@faast/ts-common'\nimport { isValidAddress } from './helpers'\n\nexport class AccountRipplePayments extends BaseRipplePayments<AccountRipplePaymentsConfig> {\n  readOnly: boolean = false\n  readonly hotSignatory: RippleSignatory\n  readonly depositSignatory: RippleSignatory\n\n  constructor(config: AccountRipplePaymentsConfig) {\n    super(config)\n    assertType(AccountRipplePaymentsConfig, config)\n    this.hotSignatory = this.accountConfigToSignatory(config.hotAccount)\n    this.depositSignatory = this.accountConfigToSignatory(config.depositAccount)\n  }\n\n  accountConfigToSignatory(accountConfig: RippleAccountConfig): RippleSignatory {\n    if (RippleKeyPair.is(accountConfig)) {\n      if (!accountConfig.privateKey) {\n        this.readOnly = true\n      }\n      const address = this.rippleApi.deriveAddress(accountConfig.publicKey)\n      return {\n        address,\n        secret: accountConfig,\n      }\n    } else if (RippleSecretPair.is(accountConfig)) {\n      if (!accountConfig.secret) {\n        this.readOnly = true\n      }\n      return accountConfig\n    } else if (isValidAddress(accountConfig)) {\n      this.readOnly = true\n      return {\n        address: accountConfig,\n        secret: '',\n      }\n    }\n    throw new Error('Invalid ripple account config provided to ripple payments')\n  }\n\n  isReadOnly() {\n    return this.readOnly\n  }\n\n  getPublicConfig(): AccountRipplePaymentsConfig {\n    return {\n      ...this.config,\n      hotAccount: this.hotSignatory.address,\n      depositAccount: this.depositSignatory.address,\n    }\n  }\n\n  getAccountIds(): string[] {\n    return [this.hotSignatory.address, this.depositSignatory.address]\n  }\n\n  getAccountId(index: number): string {\n    if (index < 0) {\n      throw new Error(`Invalid ripple payments accountId index ${index}`)\n    }\n    if (index === 0) {\n      return this.hotSignatory.address\n    }\n    return this.depositSignatory.address\n  }\n\n  getHotSignatory() {\n    return this.hotSignatory\n  }\n\n  getDepositSignatory() {\n    return this.depositSignatory\n  }\n}\n","import {\n  BalanceActivityCallback,\n  GetBalanceActivityOptions,\n  BalanceActivity,\n  BalanceActivityType,\n  BalanceMonitor,\n  RetrieveBalanceActivitiesResult,\n} from '@faast/payments-common'\nimport { RippleAPI } from 'ripple-lib'\nimport { FormattedPaymentTransaction, FormattedTransactionType } from 'ripple-lib/dist/npm/transaction/types'\nimport { TransactionsOptions } from 'ripple-lib/dist/npm/ledger/transactions'\n\nimport { padLeft, resolveRippleServer } from './utils'\nimport { RippleBalanceMonitorConfig } from './types'\nimport { assertValidAddress } from './helpers'\nimport { isUndefined, isNumber, isString } from 'util'\nimport { assertType } from '@faast/ts-common'\n\nexport class RippleBalanceMonitor extends BalanceMonitor {\n  rippleApi: RippleAPI\n\n  constructor(config: RippleBalanceMonitorConfig) {\n    super(config)\n    assertType(RippleBalanceMonitorConfig, config)\n    this.rippleApi = resolveRippleServer(config.server, this.networkType)\n  }\n\n  async init(): Promise<void> {\n    if (!this.rippleApi.isConnected()) {\n      await this.rippleApi.connect()\n    }\n  }\n\n  async destroy(): Promise<void> {\n    if (this.rippleApi.isConnected()) {\n      await this.rippleApi.disconnect()\n    }\n  }\n\n  async subscribeAddresses(addresses: string[]) {\n    for (let address of addresses) {\n      assertValidAddress(address)\n    }\n    try {\n      const res = await this.rippleApi.request('subscribe', { accounts: addresses })\n      if (res.status === 'success') {\n        this.logger.log('Ripple successfully subscribed', res)\n      } else {\n        this.logger.warn('Ripple subscribe unsuccessful', res)\n      }\n    } catch (e) {\n      this.logger.error('Failed to subscribe to ripple addresses', e.toString())\n      throw e\n    }\n  }\n\n  onBalanceActivity(callbackFn: BalanceActivityCallback) {\n    this.rippleApi.connection.on('transaction', async (tx: FormattedTransactionType) => {\n      if (tx.type === 'payment') {\n        const activities = await this.paymentToBalanceActivities(tx.address, tx as FormattedPaymentTransaction)\n        for (let activity of activities) {\n          callbackFn(activity)\n        }\n      }\n    })\n  }\n\n  async resolveFromToLedgers(options: GetBalanceActivityOptions): Promise<RetrieveBalanceActivitiesResult> {\n    const serverInfo = await this.rippleApi.getServerInfo()\n    const completeLedgers = serverInfo.completeLedgers.split('-')\n    let fromLedgerVersion = Number.parseInt(completeLedgers[0])\n    let toLedgerVersion = Number.parseInt(completeLedgers[1])\n    const { from, to } = options\n    const requestedFrom = isUndefined(from) ? undefined : isNumber(from) ? from : from.confirmationNumber\n    const requestedTo = isUndefined(to) ? undefined : isNumber(to) ? to : to.confirmationNumber\n    if (isNumber(requestedFrom)) {\n      if (requestedFrom < fromLedgerVersion) {\n        this.logger.warn(\n          `Server balance activity doesn't go back to ledger ${requestedFrom}, using ${fromLedgerVersion} instead`,\n        )\n      } else {\n        fromLedgerVersion = requestedFrom\n      }\n    }\n    if (isNumber(requestedTo)) {\n      if (requestedTo > toLedgerVersion) {\n        this.logger.warn(\n          `Server balance activity doesn't go up to ledger ${requestedTo}, using ${toLedgerVersion} instead`,\n        )\n      } else {\n        toLedgerVersion = requestedTo\n      }\n    }\n    return {\n      from: fromLedgerVersion,\n      to: toLedgerVersion,\n    }\n  }\n\n  async retrieveBalanceActivities(\n    address: string,\n    callbackFn: BalanceActivityCallback,\n    options: GetBalanceActivityOptions = {},\n  ): Promise<RetrieveBalanceActivitiesResult> {\n    assertValidAddress(address)\n    const { from, to } = await this.resolveFromToLedgers(options)\n    const limit = 10\n    let lastTx: FormattedTransactionType | undefined\n    let transactions: FormattedTransactionType[] | undefined\n    while (!lastTx || !transactions || (transactions.length === limit && lastTx.outcome.ledgerVersion <= to)) {\n      const getTransactionOptions: TransactionsOptions = {\n        types: ['payment'],\n        earliestFirst: true,\n        excludeFailures: true,\n        limit,\n      }\n      if (lastTx) {\n        getTransactionOptions.startTx = lastTx\n      } else {\n        getTransactionOptions.minLedgerVersion = from\n        getTransactionOptions.maxLedgerVersion = to\n      }\n      transactions = await this.rippleApi.getTransactions(address, getTransactionOptions)\n      for (let tx of transactions) {\n        if (\n          tx.type !== 'payment' ||\n          (lastTx && tx.id === lastTx.id) ||\n          tx.outcome.ledgerVersion < from ||\n          tx.outcome.ledgerVersion > to\n        ) {\n          continue\n        }\n        const payment = tx as FormattedPaymentTransaction\n        const activities = await this.paymentToBalanceActivities(address, payment)\n        for (let activity of activities) {\n          await callbackFn(activity)\n        }\n      }\n      lastTx = transactions[transactions.length - 1]\n    }\n    return { from, to }\n  }\n\n  private determineActivityTypes(address: string, tx: FormattedPaymentTransaction): BalanceActivityType[] {\n    const result: BalanceActivityType[] = []\n    if (tx.specification.source.address === address) {\n      result.push('out')\n    }\n    if (tx.specification.destination.address === address) {\n      result.push('in')\n    }\n    return result\n  }\n\n  private async paymentToBalanceActivities(\n    address: string,\n    tx: FormattedPaymentTransaction,\n  ): Promise<BalanceActivity[]> {\n    const types = this.determineActivityTypes(address, tx)\n    if (types.length === 0) {\n      this.logger.log(\n        `Cannot determine balance activity for ripple tx ${tx.id} because it doesnt concern address ${address}`,\n      )\n      return []\n    }\n    const result: BalanceActivity[] = []\n    const confirmationNumber = tx.outcome.ledgerVersion\n    const primarySequence = padLeft(String(tx.outcome.ledgerVersion), 12, '0')\n    const secondarySequence = padLeft(String(tx.outcome.indexInLedger), 8, '0')\n    const ledger = await this.rippleApi.getLedger({ ledgerVersion: confirmationNumber })\n    for (let type of types) {\n      const tag = (type === 'out' ? tx.specification.source : tx.specification.destination).tag\n      const amountObject =\n        tx.outcome.deliveredAmount || tx.specification.source.amount || (tx.specification.source as any).maxAmount\n      const amount = `${type === 'out' ? '-' : ''}${amountObject.value}`\n      const assetSymbol = amountObject.currency\n      const tertiarySequence = type === 'out' ? '00' : '01'\n      const activitySequence = `${primarySequence}.${secondarySequence}.${tertiarySequence}`\n      result.push({\n        type,\n        networkType: this.networkType,\n        networkSymbol: 'TRX',\n        assetSymbol,\n        address: address,\n        extraId: typeof tag !== 'undefined' ? String(tag) : null,\n\n        amount,\n\n        externalId: tx.id,\n        activitySequence,\n        confirmationId: ledger.ledgerHash,\n        confirmationNumber,\n        timestamp: new Date(ledger.closeTime),\n      })\n    }\n    return result\n  }\n}\n","import { PaymentsFactory } from '@faast/payments-common'\n\nimport { RipplePaymentsConfig, HdRipplePaymentsConfig, AccountRipplePaymentsConfig } from './types'\nimport { HdRipplePayments } from './HdRipplePayments'\nimport { AccountRipplePayments } from './AccountRipplePayments'\n\nexport class RipplePaymentsFactory implements PaymentsFactory<RipplePaymentsConfig> {\n  forConfig(config: HdRipplePaymentsConfig): HdRipplePayments\n  forConfig(config: AccountRipplePaymentsConfig): AccountRipplePayments\n  forConfig(config: RipplePaymentsConfig) {\n    if (HdRipplePaymentsConfig.is(config)) {\n      return new HdRipplePayments(config)\n    }\n    if (AccountRipplePaymentsConfig.is(config)) {\n      return new AccountRipplePayments(config)\n    }\n    throw new Error('Cannot instantiate ripple payments for unsupported config')\n  }\n}\n\nexport default RipplePaymentsFactory\n"],"names":["extendCodec","BaseConfig","t.union","t.string","instanceofCodec","RippleAPI","t.nullType","t.number","t.type","BaseUnsignedTransaction","BaseSignedTransaction","BaseTransactionInfo","nullable","BaseBroadcastResult","t.boolean","t.object","CreateTransactionOptions","createUnitConverters","isNil","assertType","NetworkType","DelegateLogger","Payport","isString","TransactionStatus","FeeLevel","FeeRateType","fromBase58","fromSeed","BalanceMonitor","isUndefined","isNumber"],"mappings":"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"}