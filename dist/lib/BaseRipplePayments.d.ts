import { BasePayments, BalanceResult, FeeOption, ResolvedFeeOption, Payport } from '@faast/payments-common';
import { Logger } from '@faast/ts-common';
import { RippleAPI } from 'ripple-lib';
import { Adjustment } from 'ripple-lib/dist/npm/common/types/objects';
import { BaseRipplePaymentsConfig, RippleUnsignedTransaction, RippleSignedTransaction, RippleBroadcastResult, RippleTransactionInfo, RippleCreateTransactionOptions, FromToWithPayport, RippleSignatory } from './types';
import { RipplePaymentsUtils } from './RipplePaymentsUtils';
export declare abstract class BaseRipplePayments<Config extends BaseRipplePaymentsConfig> extends RipplePaymentsUtils implements BasePayments<Config, RippleUnsignedTransaction, RippleSignedTransaction, RippleBroadcastResult, RippleTransactionInfo> {
    readonly config: Config;
    readonly rippleApi: RippleAPI;
    readonly logger: Logger;
    constructor(config: Config);
    init(): Promise<void>;
    destroy(): Promise<void>;
    getFullConfig(): Config;
    abstract getPublicConfig(): Config;
    abstract getAccountIds(): string[];
    abstract getAccountId(index: number): string;
    abstract getHotSignatory(): RippleSignatory;
    abstract getDepositSignatory(): RippleSignatory;
    abstract isReadOnly(): boolean;
    resolvePayport(payportOrIndex: Payport | number): Promise<Payport>;
    resolveFromTo(from: number, to: Payport | number): Promise<FromToWithPayport>;
    getPayport(index: number): Promise<Payport>;
    requiresBalanceMonitor(): boolean;
    getAddressesToMonitor(): string[];
    isSweepableAddressBalance(balance: string): boolean;
    getBalance(payportOrIndex: Payport | number): Promise<BalanceResult>;
    resolveIndexFromAdjustment(adjustment: Adjustment): number | null;
    getTransactionInfo(txId: string): Promise<RippleTransactionInfo>;
    resolveFeeOption(feeOption: FeeOption): Promise<ResolvedFeeOption>;
    private resolvePayportBalance;
    private doCreateTransaction;
    createTransaction(from: number, to: Payport | number, amount: string, options?: RippleCreateTransactionOptions): Promise<RippleUnsignedTransaction>;
    createSweepTransaction(from: number, to: Payport | number, options?: RippleCreateTransactionOptions): Promise<RippleUnsignedTransaction>;
    signTransaction(unsignedTx: RippleUnsignedTransaction): Promise<RippleSignedTransaction>;
    broadcastTransaction(signedTx: RippleSignedTransaction): Promise<RippleBroadcastResult>;
}
